.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_tutorial.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_tutorial.py:


TRAIT Tutorial
==============

This example demonstrates some of the library's core features, namely simulation and analysis of 2D diffusion tracks. You will learn about:

Simulation
~~~~~~~~~~

- Simulating multiple tracks with different diffusion models

Analysis
~~~~~~~~

- Apparent Diffusion Coefficient (ADC) analysis of a single track
- ADC analysis of multiple tracks in bulk
- Retreiving an analysis summary of multiple tracks
- Filtering tracks by diffusion category

Simulate tracks
---------------

First, import the required simulators:


.. code-block:: default


    from trait2d.simulators import BrownianDiffusion
    from trait2d.simulators import HoppingDiffusion








A simulator can be initialised with different parameters. For Brownian diffusion, we choose the following:


.. code-block:: default


    params = dict()
    params["Tmax"] = 0.5 # Maximum simulation time (s)
    params["dt"] = 1e-4 # Simulation time resolution (s)
    params["dL"] = 1e-12 # Simulation spatial resolution (m)
    params["d"] = 1e-12 # Diffusion coefficient (m^2/s)
    params["L"] = 1e-5 # Simulation domain size (m)
    params["seed"] = 42 # Seed to initialize the random generator (for reproducibility)
    params["quantize"] = False # Quantize the position to the simulation spatial resolution grid.

    simulator_brownian = BrownianDiffusion(**params)








Parameters differ between simulators.


.. code-block:: default


    params = dict()
    params["Tmax"] = 0.5 # Maximum simulation time (s)
    params["dt"] = 1e-4 # Simulation time resolution (s)
    params["dL"] = 1e-8 # Simulation spatial resolution (m)
    params["Df"] = 8e-13 # Free diffusion coefficient [m^2/s]
    params["L"] = 1e-5 # Simulation domain size (m)
    params["HP"] = 0.01 # Hopping probability [0-1]
    params["HL"] = 1e-6 # Average compartment diameter/length [m]
    params["seed"] = 42 # Seed to initialize the random generator (for reproducibility)
    params["quantize"] = False # Quantize the position to the simulation spatial resolution grid.

    simulator_hop = HoppingDiffusion(**params)








After initialisation the simulations can be run. The results will be stored in the simulator object.


.. code-block:: default


    simulator_brownian.run();
    simulator_hop.run();





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.




The simulated trajectoies can be plotted:


.. code-block:: default


    simulator_brownian.plot_trajectory()
    simulator_hop.plot_trajectory()




.. image:: /auto_examples/images/sphx_glr_plot_tutorial_001.png
    :alt: Diffusion
    :class: sphx-glr-single-img





It is also possible to export the simulated tracks as videos using the ``trait2d.simulators.iscat_movie`` class. Currently, the tracks need first to be saved e.g. as a ``.csv`` using ``BrownianDiffusion.save()`` (or any other Diffusion model) and then load them again using ``iscat_movie.load_tracks()``. You also need to load a PSF with ``iscat_movie.load_psf()``.

Analyse tracks
--------------

Before we start fitting our data, we need to add some models. ``trait2d.analysis.models`` contains a few models that we can add to ``ModelDB``. All models added this way will be used during analysis.


.. code-block:: default


    from trait2d.analysis import ModelDB
    from trait2d.analysis.models import ModelBrownian, ModelConfined, ModelHop

    ModelDB().add_model(ModelBrownian)
    ModelDB().add_model(ModelConfined)
    ModelDB().add_model(ModelHop)








Single tracks are stored in a ``Track`` object.


.. code-block:: default


    from trait2d.analysis import Track








We can create a single track from our last simulation:


.. code-block:: default


    single_track = Track.from_dict(simulator_brownian.trajectory)








We can now do ADC analysis on the track:


.. code-block:: default


    results = single_track.adc_analysis(fit_max_time=0.5e-1)








Analysis results like the calculated values for :math:`D_{app}`, fit parameters and much more are returned in a dictionary. We can also retreive the dictionary of the last analysis at any time with ``get_adc_analysis_results``.


.. code-block:: default


    fit_results = results["fit_results"]
    best_model = results["best_model"]
    print(fit_results)
    print(best_model)

    single_track.plot_adc_analysis_results()




.. image:: /auto_examples/images/sphx_glr_plot_tutorial_002.png
    :alt: Diffusion Category: ModelBrownian
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'ModelBrownian': {'params': array([1.07105773e-12, 4.80247510e-09]), 'errors': array([1.56731649e-15, 2.13640549e-10]), 'bic': -30815.35406965663, 'KSTestStat': 0.4899598393574297, 'KStestPValue': 1.360060612689e-54, 'rel_likelihood': 1.0}, 'ModelConfined': {'params': array([1.07148572e-12, 4.77928647e-09, 3.44811967e+01]), 'errors': array([1.56998956e-15, 2.14327939e-10, 3.41458755e-23]), 'bic': -30809.062700072795, 'KSTestStat': 0.4879518072289157, 'KStestPValue': 3.9575097043734827e-54, 'rel_likelihood': 0.043037442260905744}, 'ModelHop': {'params': array([1.07105762e-12, 1.16677212e-27, 4.80344249e-09, 3.04817374e-06]), 'errors': array([1.65965747e-15, 7.49926204e-12, 1.41834286e-09, 0.00000000e+00]), 'bic': -30802.9501904522, 'KSTestStat': 0.4899598393574297, 'KStestPValue': 1.360060612689e-54, 'rel_likelihood': 0.0020254981630878355}}
    ModelBrownian




Multiple tracks are then stored in a ``ListOfTracks`` object.


.. code-block:: default


    from trait2d.analysis import ListOfTracks








For now, we just simulate some more tracks and create a single ``ListOfTracks`` from these tracks. Multiple tracks can also be loaded from a single file using ``ListOfTracks.from_file()``.


.. code-block:: default


    import random
    tracks = []
    for i in range(10):
        simulator_brownian.run()
        simulator_hop.run()
        tracks.append(Track.from_dict(simulator_brownian.trajectory))
        tracks.append(Track.from_dict(simulator_hop.trajectory))
    
    tracks = ListOfTracks(tracks)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.
    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.
    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.
    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.
    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.
    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.
    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.
    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.
    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.
    Free diffusion simulation was completed in 5000 iterations.
    Hopping diffusion simulation was completed in 5000 iterations.




In order to set initial parameters or bounds for the fits, we need to modify the models inside ``ModelDB``. These will then be applied during all analysis from this point on.


.. code-block:: default


    ModelDB().get_model(ModelBrownian).initial = fit_results["ModelBrownian"]["params"]
    ModelDB().get_model(ModelConfined).initial = fit_results["ModelConfined"]["params"]
    ModelDB().get_model(ModelHop).initial = fit_results["ModelHop"]["params"]








Here, we set all initial parameters to the results of our single fit from before.

Now that we set our initial guesses, let's analyse the remaining tracks at once.

Enabling logarithmic sampling is a good idea since the time axis will be scaled logarithmically by default. We can also set the maximum time on the time for which to fit.

``adc_analysis`` will return a list containing the indices of all tracks for which a fit has failed. These can then be retreived with ``get_track`` and analysed further.


.. code-block:: default


    tracks.adc_analysis(fit_max_time=50e-3, enable_log_sampling=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/TRAIT2D/TRAIT2D/trait2d/analysis/__init__.py:346: UserWarning: ADC analysis failed for 4/20 tracks. Consider raising the maximum function evaluations using the maxfev keyword argument. To get a more detailed stacktrace, run the ADC analysis for a single track.
      warnings.warn("ADC analysis failed for {}/{} tracks. "

    [5, 8, 14, 17]



``adc_summary`` gives an overview of the analysis results including optional plots, the averaged parameters for each model, the averaged MSD for each model and the averaged $D_{app}$ for each model.

(We need to set ``interpolation = True`` since some of the time differences in the simulated tracks deviate *slightly* from the expected value.)


.. code-block:: default


    tracks.adc_summary(plot_dapp=True, plot_pie_chart=True, interpolation=True)




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_tutorial_003.png
          :alt: plot tutorial
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_tutorial_004.png
          :alt: plot tutorial
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'sectors': {'ModelBrownian': 0.1, 'ModelHop': 0.15, 'ModelConfined': 0.55, 'not catergorized': 0.2}, 'average_params': {'ModelBrownian': array([1.05499885e-12, 7.14578703e-09]), 'ModelHop': array([7.85549427e-13, 8.47063914e-10, 1.77352507e-09, 9.24858711e-08]), 'ModelConfined': array([8.61625313e-13, 7.94592647e-09, 5.68513154e-02])}, 't': array([0.00000000e+00, 1.00020004e-04, 2.00040008e-04, ...,
           4.99799960e-01, 4.99899980e-01, 5.00000000e-01]), 'average_msd': {'ModelBrownian': array([3.96373023e-16, 7.95066916e-16, 1.19492629e-15, ...,
           4.08705493e-13, 3.99126512e-13, 3.91128294e-13]), 'ModelHop': array([3.43414903e-16, 6.85517115e-16, 1.02427214e-15, ...,
           3.12136527e-12, 3.12059471e-12, 3.11145227e-12]), 'ModelConfined': array([3.53314142e-16, 7.04202433e-16, 1.05389638e-15, ...,
           9.44623902e-13, 9.45688734e-13, 9.45836186e-13])}, 'average_dapp': {'ModelBrownian': array([1.48639884e-12, 1.19246594e-12, 1.12007961e-12, ...,
           2.04530048e-13, 1.99696420e-13, 1.95655477e-13]), 'ModelHop': array([1.28764844e-12, 1.02810559e-12, 9.60084046e-13, ...,
           1.56203669e-12, 1.56133847e-12, 1.55645264e-12]), 'ModelConfined': array([1.32479927e-12, 1.05613996e-12, 9.87858166e-13, ...,
           4.72721731e-13, 4.73159875e-13, 4.73138941e-13])}}



Now that analysis is done we can also retrieve all tracks that fit a certain diffusion category best:


.. code-block:: default


    tracks_brownian = tracks.get_sublist(model=ModelBrownian)
    tracks_brownian.adc_summary(plot_dapp=True, interpolation=True)




.. image:: /auto_examples/images/sphx_glr_plot_tutorial_005.png
    :alt: plot tutorial
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'sectors': {'ModelBrownian': 1.0, 'not catergorized': 0.0}, 'average_params': {'ModelBrownian': array([1.05499885e-12, 7.14578703e-09])}, 't': array([0.000e+00, 1.000e-04, 2.000e-04, ..., 4.998e-01, 4.999e-01,
           5.000e-01]), 'average_msd': {'ModelBrownian': array([3.96373023e-16, 7.94986945e-16, 1.19476372e-15, ...,
           4.08696882e-13, 3.99118848e-13, 3.91123496e-13])}, 'average_dapp': {'ModelBrownian': array([1.48639884e-12, 1.19248042e-12, 1.12009099e-12, ...,
           2.04525696e-13, 1.99692552e-13, 1.95653053e-13])}}



As mentioned before, we can retreive the analysis results for any track, at any time. Single tracks can be received with ``ListOfTracks.get_track``.


.. code-block:: default


    tracks_brownian.get_track(0).get_adc_analysis_results()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {'Dapp': array([1.47182910e-12, 1.18374989e-12, 1.10582574e-12, ...,
           3.97828079e-13, 3.88907108e-13, 3.81322523e-13]), 'Dapp_err': array([1.44328380e-12, 1.18333621e-12, 1.09601934e-12, ...,
           1.42360068e-14, 1.33248871e-14, 1.78553304e-14]), 'fit_indices': [0, 1, 3, 6, 11, 19, 31, 50, 80, 128, 204, 324], 'fit_results': {'ModelBrownian': {'params': array([1.11722710e-12, 6.03321517e-09]), 'errors': array([2.89658357e-14, 5.53003120e-10]), 'bic': -718.1883068721818, 'KSTestStat': 0.4166666666666667, 'KStestPValue': 0.2557751845677543, 'rel_likelihood': 1.0}, 'ModelConfined': {'params': array([1.11730757e-12, 6.03202486e-09, 5.55461843e+01]), 'errors': array([3.05670802e-14, 5.83588107e-10, 1.43245386e-22]), 'bic': -715.6783783217994, 'KSTestStat': 0.4166666666666667, 'KStestPValue': 0.2557751845677543, 'rel_likelihood': 0.28508603268654714}, 'ModelHop': {'params': array([1.21384916e-12, 1.00769526e-10, 3.76868716e-10, 6.11661632e-08]), 'errors': array([5.63145536e-14, 2.42371060e-09, 1.31726434e-08, 3.99299475e-12]), 'bic': -704.0861235298773, 'KSTestStat': 0.75, 'KStestPValue': 0.0014969550573265746, 'rel_likelihood': 0.0008664625486486371}}, 'best_model': 'ModelBrownian'}



We can also plot them:


.. code-block:: default


    tracks_brownian.get_track(0).plot_adc_analysis_results()




.. image:: /auto_examples/images/sphx_glr_plot_tutorial_006.png
    :alt: Diffusion Category: ModelBrownian
    :class: sphx-glr-single-img





It is a good idea to use `ModelDB().cleanup()` at the end of your notebooks to remove all models again. Otherwise they may carry over into other open notebooks.


.. code-block:: default


    ModelDB().cleanup()







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  16.832 seconds)


.. _sphx_glr_download_auto_examples_plot_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_tutorial.py <plot_tutorial.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_tutorial.ipynb <plot_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
